/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>

#define CMD_ERASE 0x01
#define CMD_WRITE 0x02
#define CMD_JUMP  0x03

#define ACK  0x79
#define NACK 0x1F

UART_HandleTypeDef huart2;

uint8_t rx_byte = 0;  // removed volatile here
uint8_t cmd = 0;
uint8_t cmd_received = 0;

uint8_t payload[512];
uint16_t payload_index = 0;
uint16_t expected_payload_size = 0;
void JumpToApplication(uint32_t address);
static void FLASH_PageErase_F0(uint32_t PageAddress);
HAL_StatusTypeDef ProcessWrite(uint8_t *data)
{
    uint32_t address = *((uint32_t*)&data[0]);
    uint8_t *write_data = &data[4];

    HAL_FLASH_Unlock();

    for (uint32_t i = 0; i < 256; i += 2)
    {
        uint16_t halfword = (write_data[i + 1] << 8) | write_data[i];
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + i, halfword) != HAL_OK)
        {
            HAL_FLASH_Lock();
            return HAL_ERROR;
        }
    }

    HAL_FLASH_Lock();
    return HAL_OK;
}

void ProcessJump(uint8_t *data)
{
    uint32_t jump_addr = *((uint32_t*)data);

    uint8_t ack = ACK;
    // Use blocking transmit so UART finishes sending
    HAL_UART_Transmit(&huart2, &ack, 1, 100);

    // small delay to ensure byte fully transmitted (optional)
    HAL_Delay(5);

    JumpToApplication(jump_addr);
}

#define VECTOR_TABLE_SIZE_BYTES 192  // 48 * 4
#define SRAM_BASE       0x20000000UL
#define SRAM_SIZE       0x00002000UL  // 8 KB for STM32F030R8
#define FLASH_BASE      0x08000000UL
#define FLASH_SIZE      0x00010000UL  // 64 KB flash size

void CpuMemCopy(uint32_t dest, uint32_t src, uint16_t len)
{
    uint8_t *to = (uint8_t *)dest;
    uint8_t *from = (uint8_t *)src;

    while (len-- > 0)
    {
        *to++ = *from++;
        // Optional: if you have a watchdog, feed it here
        // CopService();
    }
}

void JumpToApplication(uint32_t appAddress)
{
    // Disable interrupts globally
    __disable_irq();

    // Deinit HAL (reset peripherals etc.)
    HAL_DeInit();

    // Reset SysTick
    SysTick->CTRL = 0;
    SysTick->LOAD = 0;
    SysTick->VAL  = 0;

    // Clear pending interrupts in NVIC
    for (int i = 0; i < (sizeof(NVIC->ICPR) / sizeof(NVIC->ICPR[0])); i++) {
        NVIC->ICPR[i] = 0xFFFFFFFF;
    }

    SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;

    // Pointer to application's vector table in flash
    uint32_t *vector_table = (uint32_t *)appAddress;

    // Set Main Stack Pointer (first word in vector table)
    __set_MSP(vector_table[0]);

    // Get Reset_Handler address (second word in vector table)
    void (*appResetHandler)(void) = (void (*)(void))vector_table[1];

    // Enable interrupts again
    // Jump to application Reset_Handler
    appResetHandler();

    // Should never get here
    while(1);
}


HAL_StatusTypeDef ProcessErase(uint8_t *data)
{
    uint32_t address = *((uint32_t*)&data[0]);
    uint32_t size    = *((uint32_t*)&data[4]);
    uint32_t end     = address + size;

    // Unlock flash
    HAL_FLASH_Unlock();

    for (; address < end; address += FLASH_PAGE_SIZE)
    {
        FLASH_PageErase_F0(address);
    }

    // Lock flash
    HAL_FLASH_Lock();

    return HAL_OK;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2)
    {
        if (cmd == 0)
        {
            cmd = rx_byte;

            switch (cmd)
            {
                case CMD_ERASE:
                    expected_payload_size = 12;
                    break;
                case CMD_WRITE:
                    expected_payload_size = 260;
                    break;
                case CMD_JUMP:
                    expected_payload_size = 4;
                    break;
                default:
                {
                    uint8_t nack = NACK;
                    HAL_UART_Transmit_IT(&huart2, &nack, 1);
                    cmd = 0;
                    payload_index = 0;
                    HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
                    return;
                }
            }
            payload_index = 0;
            HAL_UART_Receive_IT(&huart2, payload, expected_payload_size);
        }
        else
        {
            cmd_received = 1;
            // Do not restart RX here, main loop will handle it
        }
    }
}
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void FLASH_PageErase_F0(uint32_t PageAddress)
{
    // 1. Wait for any previous operation to complete
    while (FLASH->SR & FLASH_SR_BSY);

    // 2. Set Page Erase (PER) bit
    FLASH->CR |= FLASH_CR_PER;

    // 3. Load page address
    FLASH->AR = PageAddress;

    // 4. Start erase
    FLASH->CR |= FLASH_CR_STRT;

    // 5. Wait for erase to complete (BSY cleared)
    while (FLASH->SR & FLASH_SR_BSY);

    // 6. Check for End Of Operation (EOP)
    if (FLASH->SR & FLASH_SR_EOP)
    {
        // Clear EOP
        FLASH->SR |= FLASH_SR_EOP;
    }

    // 7. Clear PER bit
    FLASH->CR &= ~FLASH_CR_PER;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);

  while (1)
  {
      if (cmd_received)
      {
          cmd_received = 0;
          uint8_t response = NACK;
          __disable_irq();
          switch (cmd)
          {
              case CMD_ERASE:
                  if (ProcessErase(payload) == HAL_OK) response = ACK;
                  break;

              case CMD_WRITE:
                  if (ProcessWrite(payload) == HAL_OK) response = ACK;
                  break;

              case CMD_JUMP:
                  response = ACK;
                  __enable_irq();
                  HAL_UART_Transmit_IT(&huart2, &response, 1);
                  HAL_Delay(10); // Wait for ACK TX
                  ProcessJump(payload);
                  while(1); // Should never return
                  break;
          }
          __enable_irq();
          if (cmd != CMD_JUMP) // Jump already sent ACK
          {
        	  while (FLASH->SR & FLASH_SR_BSY); // Wait for flash to be ready
        	  for (volatile int i = 0; i < 5000; i++); // Small NOP loop (~few us)
//              HAL_UART_Transmit_IT(&huart2, &response, 1);
        	  for (uint32_t i = 0; i < 1; i++) {
        	      while (!(USART2->ISR & USART_ISR_TXE)); // Wait until TX buffer empty
        	      USART2->TDR = response;
        	  }
        	  while (!(USART2->ISR & USART_ISR_TC)); // Wait for completion
          }

          cmd = 0;
          payload_index = 0;
          expected_payload_size = 0;

          HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
      }

      // Optional: watchdog refresh or background tasks here
  }
    /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Configure PA2 as USART2_TX (Alternate function push-pull)
   GPIO_InitStruct.Pin = GPIO_PIN_2;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   GPIO_InitStruct.Pull = GPIO_NOPULL;
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

   // Configure PA3 as USART2_RX (Alternate function input)
   GPIO_InitStruct.Pin = GPIO_PIN_3;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // For STM32F0 series, RX is often also AF_PP
   GPIO_InitStruct.Pull = GPIO_NOPULL;
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
